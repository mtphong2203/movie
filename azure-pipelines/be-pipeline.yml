# specific branch build
trigger:
  branches:
    include:
    - main
    - releases/*
    exclude:
    - releases/old*
  paths:
    exclude:
    - README.md
    - docs/*
    - design/*
    - src/client/README.md
    - src/server/README.md
    
pool: ViettelHostAgent

variables:
- group: MOVIE_BE_ENV
- group: DOCKER_ENV
- name: IMAGE_TAG
  value: $(Build.BuildId)

stages:
  - stage: Build
    displayName: Build & Push Docker Image
    jobs:
      - job: Build
        displayName: Build
        steps:
          - bash: 'wget https://aka.ms/download-jdk/microsoft-jdk-21.0.5-linux-x64.tar.gz'
            displayName: 'Bash Script'

          - task: JavaToolInstaller@0
            displayName: 'Use Java 21'
            inputs:
              versionSpec: 21
              jdkArchitectureOption: x64
              jdkSourceOption: LocalDirectory
              jdkFile: '$(build.sourcesdirectory)/microsoft-jdk-21.0.5-linux-x64.tar.gz'
              jdkDestinationDirectory: '$(agent.toolsDirectory)/jdk21'
          - task: CmdLine@2
            inputs:
              script: 'wget https://dlcdn.apache.org/maven/maven-3/3.9.9/binaries/apache-maven-3.9.9-bin.zip'
          - task: ExtractFiles@1
            inputs:
              archiveFilePatterns: 'apache-maven-3.9.9-bin.zip'
              destinationFolder: '$(build.sourcesdirectory)/maven'
          - script: |
              echo "##vso[task.setvariable variable=JAVA_HOME]$(JAVA_HOME_21_X64)"
              echo "##vso[task.setvariable variable=PATH]$(JAVA_HOME_21_X64)/bin:$(PATH)"
            displayName: "Set java version"

          - task: Maven@4
            inputs:
              mavenPomFile: './src/server/pom.xml'
              mavenOptions: '-Xmx3072m'
              mavenVersionOption: 'Path'
              mavenDirectory: '$(build.sourcesdirectory)/maven/apache-maven-3.9.9'
              mavenSetM2Home: true
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '1.21'
              jdkArchitectureOption: 'x64'
              publishJUnitResults: true
              testResultsFiles: '**/surefire-reports/TEST-*.xml'
              goals: 'package'
          - task: DockerCompose@1
            displayName: Build Docker Image
            inputs:
              containerregistrytype: Container Registry
              dockerRegistryEndpoint: "DockerHub"
              dockerComposeFile: "./src/deployment/docker-compose.be.yml"
              action: "Build services"
              projectName: '$(DOCKER_BE_IMAGE_NAME)'
              additionalImageTags: $(IMAGE_TAG)

          - task: DockerCompose@1
            displayName: "Push Docker image"
            inputs:
              containerregistrytype: "Container Registry"
              dockerRegistryEndpoint: "DockerHub"
              dockerComposeFile: "./src/deployment/docker-compose.be.yml"
              action: "Push services"
              projectName: '$(DOCKER_BE_IMAGE_NAME)'
              additionalImageTags: $(IMAGE_TAG)

  - stage: Deploy
    displayName: Deploy to VPS Server
    dependsOn: Build
    condition: succeeded()
    jobs:
      - deployment: Deploy
        displayName: Deployment
        environment: 'Production'
        strategy:
          runOnce:
            deploy:
              steps:
                - task: SSH@0
                  displayName: Login to VPS server
                  inputs:
                    sshEndpoint: SSH Viettel IDC
                    runOptions: inline
                    inline: |
                      # Install docker engine if not exist
                      if ! [ -x "$(command -v docker)" ]; then
                        curl -fsSL https://get.docker.com -o get-docker.sh
                        sudo sh get-docker.sh
                      fi

                      # Login to vps server
                      export DOCKER_USERNAME='$(DOCKER_USERNAME)'
                      export DOCKER_BE_IMAGE_NAME='$(DOCKER_BE_IMAGE_NAME)'
                      export IMAGE_TAG='$(IMAGE_TAG)'

                      # Remove docker config file if exist
                      if [ -f ~/.docker/config.json ]; then
                        rm ~/.docker/config.json
                      fi

                      # cat ~/congdinh.txt | docker login --username $DOCKER_USERNAME --password-stdin

                      # Pull image from docker hub
                      docker pull $DOCKER_USERNAME/$DOCKER_BE_IMAGE_NAME:$IMAGE_TAG

                      # Stop and remove old container if exist
                      if [ "$(docker ps -aq -f name=$DOCKER_BE_IMAGE_NAME)" ]; then
                        docker stop $DOCKER_BE_IMAGE_NAME
                        docker rm $DOCKER_BE_IMAGE_NAME
                      fi

                      # Run new container
                      docker run -d --name $DOCKER_BE_IMAGE_NAME \
                        -e SPRING_PROFILES_ACTIVE='$(SPRING_PROFILES_ACTIVE)' \
                        -e DB_HOST='$(DB_HOST)' \
                        -e DB_PORT='$(DB_PORT)' \
                        -e DB_NAME='$(DB_NAME)' \
                        -e DB_USER='$(DB_USER)' \
                        -e DB_PASSWORD='$(DB_PASSWORD)' \
                        -e ACCESS_TOKEN_SECRET_KEY='$(ACCESS_TOKEN_SECRET_KEY)' \
                        -e MAIL_HOST='$(MAIL_HOST)' \
                        -e MAIL_PORT='$(MAIL_PORT)' \
                        -e MAIL_USERNAME='$(MAIL_USERNAME)' \
                        -e MAIL_DISPLAYNAME='$(MAIL_DISPLAYNAME)' \
                        -e MAIL_PASSWORD='$(MAIL_PASSWORD)' \
                        -e MAIL_SMTP_AUTH='$(MAIL_SMTP_AUTH)' \
                        -e MAIL_SMTP_STARTTLS_ENABLE='$(MAIL_SMTP_STARTTLS_ENABLE)' \
                        -e MAIL_SMTP_CONNECTIONTIMEOUT='$(MAIL_SMTP_CONNECTIONTIMEOUT)' \
                        -e MAIL_SMTP_TIMEOUT='$(MAIL_SMTP_TIMEOUT)' \
                        -e MAIL_SMTP_WRITETIMEOUT='$(MAIL_SMTP_WRITETIMEOUT)' \
                        -e ANG_APP_API_URL='$(ANG_APP_API_URL)' \
                        -e ANG_APP_URL='$(ANG_APP_URL)' \
                        -p 8080:8080 $DOCKER_USERNAME/$DOCKER_BE_IMAGE_NAME:$IMAGE_TAG